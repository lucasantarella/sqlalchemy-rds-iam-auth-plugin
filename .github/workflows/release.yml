name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Create a pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  id-token: write  # Required for OIDC

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release  # Use environment for protection

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine packaging

      - name: Configure Git
        run: |
          git config --local user.email "${{ vars.GIT_EMAIL || 'action@github.com' }}"
          git config --local user.name "${{ vars.GIT_NAME || 'GitHub Action' }}"

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          python << 'EOF'
          import tomllib
          import re
          from packaging import version

          # Read current version
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)

          current = version.Version(data['project']['version'])

          # Calculate new version
          bump_type = '${{ github.event.inputs.version_bump }}'
          if bump_type == 'major':
              new_version = f"{current.major + 1}.0.0"
          elif bump_type == 'minor':
              new_version = f"{current.major}.{current.minor + 1}.0"
          else:  # patch
              new_version = f"{current.major}.{current.minor}.{current.micro + 1}"

          # Add prerelease suffix if requested
          if '${{ github.event.inputs.prerelease }}' == 'true':
              new_version += "rc1"

          # Update pyproject.toml using regex to preserve formatting
          with open('pyproject.toml', 'r') as f:
              content = f.read()

          updated_content = re.sub(
              r'version = "[^"]*"',
              f'version = "{new_version}"',
              content
          )

          with open('pyproject.toml', 'w') as f:
              f.write(updated_content)

          print(f"Updated version from {current} to {new_version}")
          EOF

      - name: Extract new version
        id: new_version
        run: |
          NEW_VERSION=$(python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          # Create changelog entry if CHANGELOG.md doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            cat << 'EOF' > CHANGELOG.md
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          EOF
          fi

          # Prepare new changelog entry
          cat << EOF > CHANGELOG_ENTRY.md
          ## [${{ steps.new_version.outputs.version }}] - $(date +%Y-%m-%d)

          ### Added
          - New features and enhancements

          ### Changed
          - Updated dependencies and improvements

          ### Fixed
          - Bug fixes and patches

          ### Security
          - Security improvements

          EOF

          # Insert new entry after the header
          sed -i '/^# Changelog/r CHANGELOG_ENTRY.md' CHANGELOG.md

      - name: Build package
        run: |
          python -m build
          echo "Built files:"
          ls -la dist/

      - name: Test package installation
        run: |
          # Check package integrity
          twine check dist/*

          # Test installation
          pip install dist/*.whl
          python -c "
          try:
              from sqlalchemy_rds_iam import RDSIAMAuthPlugin
              from sqlalchemy_rds_iam.plugin import create_rds_iam_engine
              print('âœ“ Package imports successful')
          except ImportError as e:
              print(f'âœ— Import failed: {e}')
              exit(1)
          "

      - name: Commit version bump and changelog
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "Release v${{ steps.new_version.outputs.version }}"
          git push

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release v${{ steps.new_version.outputs.version }}
          body_path: CHANGELOG_ENTRY.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/sqlalchemy_rds_iam_auth_plugin-${{ steps.new_version.outputs.version }}-py3-none-any.whl
          asset_name: sqlalchemy_rds_iam_auth_plugin-${{ steps.new_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/sqlalchemy-rds-iam-auth-plugin-${{ steps.new_version.outputs.version }.tar.gz
          asset_name: sqlalchemy-rds-iam-auth-plugin-${{ steps.new_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Publish to Test PyPI
        if: github.event.inputs.prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true

      - name: Publish to PyPI
        if: github.event.inputs.prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Create summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Release v${{ steps.new_version.outputs.version }} Published! ðŸš€

          ## Package Details
          - **Version**: ${{ steps.new_version.outputs.version }}
          - **Type**: ${{ github.event.inputs.prerelease == 'true' && 'Pre-release' || 'Release' }}
          - **PyPI**: ${{ github.event.inputs.prerelease == 'true' && 'Test PyPI' || 'PyPI' }}

          ## Links
          - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new_version.outputs.version }})
          - [PyPI Package](https://pypi.org/project/sqlalchemy-rds-iam-auth-plugin/)

          ## Installation
          \`\`\`bash
          pip install sqlalchemy-rds-iam-auth-plugin
          \`\`\`
          EOF
